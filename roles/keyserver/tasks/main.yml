# SPDX-License-Identifier: MIT
---
# yamllint disable rule:line-length
- name: Set platform/version specific variables
  include_vars: "{{ item }}"
  loop:
    - "{{ role_path }}/vars/default.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['os_family'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['os_family'] }}_{{ ansible_facts['architecture'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}_{{ ansible_facts['architecture'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}_{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}_{{ ansible_facts['distribution_major_version'] }}_{{ ansible_facts['architecture'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}_{{ ansible_facts['distribution_version'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}_{{ ansible_facts['distribution_version'] }}_{{ ansible_facts['architecture'] }}.yml"
  when: item is file
# yamllint enable rule:line-length

- name: Determine if system is ostree and set flag
  when: not __ansible_pcp_is_ostree is defined
  block:
    - name: Check if system is ostree
      stat:
        path: /run/ostree-booted
      register: __ostree_booted_stat

    - name: Set flag to indicate system is ostree
      set_fact:
        __ansible_pcp_is_ostree: "{{ __ostree_booted_stat.stat.exists }}"

- name: Determine if host is booted
  # noqa command-instead-of-module
  command: systemctl is-system-running
  register: __is_system_running
  changed_when: false
  check_mode: false
  failed_when: false

- name: Require installed systemd
  fail:
    msg: "Error: This role requires systemd to be installed."
  when: '"No such file or directory" in __is_system_running.msg | d("")'

- name: Set flag to indicate that systemd runtime operations are available
  set_fact:
    __keyserver_is_booted: "{{ __is_system_running.stdout != 'offline' }}"

- name: Install key server packages
  package:
    name: "{{ __keyserver_packages + __keyserver_packages_extra }}"
    state: present
    use: "{{ (__ansible_pcp_is_ostree | d(false)) |
             ternary('ansible.posix.rhel_rpm_ostree', omit) }}"

- name: Ensure key server configuration directory exists
  file:
    path: "{{ __keyserver_conf_path }}"
    state: directory
    owner: "{{ __keyserver_name }}"
    group: root
    mode: "0750"

# yamllint disable rule:line-length
- name: Ensure key server is configured
  template:
    src: "{{ item }}"
    dest: "{{ __keyserver_conf_path }}/{{ __keyserver_conf_file }}"
    mode: "0640"
    owner: "{{ __keyserver_name }}"
    group: root
  with_first_found:
    - "{{ ansible_facts['distribution'] }}_{{ ansible_facts['distribution_major_version'] }}_keyserver.conf.j2"
    - "{{ ansible_facts['distribution'] }}_keyserver.conf.j2"
    - "{{ __keyserver_name }}.conf.j2"
  notify: Restart key server
# yamllint enable rule:line-length

- name: Ensure key server configuration symlink exists
  file:
    src: "{{ __keyserver_conf_path }}/{{ __keyserver_conf_file }}"
    dest: "{{ __keyserver_conf_link }}/{{ __keyserver_conf_file }}"
    state: link
    force: true

- name: Ensure key server service is running and enabled on boot
  service:
    name: "{{ __keyserver_name }}"
    state: "{{ 'started' if __keyserver_is_booted else omit }}"
    enabled: true
